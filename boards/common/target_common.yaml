# ==============================================================================
# NEATO SMART TARGET - COMMON COMPONENTS
# ==============================================================================
# This file contains shared components used by all target hardware revisions.
# It includes common substitutions, networking, sensors, controls, and globals
# that are consistent across different hardware versions.
#
# Included by: target_rev1_x.yaml, target_rev3_x.yaml
# ==============================================================================

# ==============================================================================
# COMMON SUBSTITUTIONS - Shared Configuration Variables
# ==============================================================================
substitutions:
  # Hardware Configuration (common across all revisions)
  hit_display_time: "3000"       # Time to display hit effect
  default_relay_time: "3000"     # Relay activation time after hit in milliseconds
  default_cooldown_time: "1000"  # Time target is inactive after hit in milliseconds
  default_points: "10"           # Points awarded for hitting this target

  # Common GPIO Pins (consistent across revisions)
  led_gpio: GPIO5        # Main target LED strip
  ir_gpio: GPIO19        # IR receiver
  relay_gpio: GPIO23     # Relay output
  tx_gpio: GPIO01        # UART TX
  rx_gpio: GPIO03        # UART RX

  # Project Information
  project_name: "CodeMakesItGo.Target"

# ==============================================================================
# EXTERNAL PACKAGES - Common Includes
# ==============================================================================
packages:
  color_controls: !include color_controls.yaml
  target_scripts: !include target_hit_script.yaml

# ==============================================================================
# CORE ESPHOME CONFIGURATION - Common Settings
# ==============================================================================
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: ${project_name}
    version: ${project_version}

# ==============================================================================
# ESP32 FRAMEWORK - Common Settings
# ==============================================================================
esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino
    version: recommended
  flash_size: 4MB

# ==============================================================================
# NETWORK & WEB INTERFACE - Common Services
# ==============================================================================
web_server: # Target web page
  port: 80
  include_internal: false
  css_include: "boards/common/custom.css"
  js_include: "boards/common/custom.js"
  version: 2

# Allow Over-The-Air updates
ota: 
  - platform: esphome
    password: ""

# ==============================================================================
# COMMON SENSORS - System Monitoring
# ==============================================================================
sensor:
  # System uptime monitoring
  - platform: uptime
    name: "Uptime Sensor"
    update_interval: 60s  # Reduce frequency for less spam

# ==============================================================================
# COMMON SWITCHES - System Controls
# ==============================================================================
switch:
  # Main relay output control
  - platform: gpio
    pin: ${relay_gpio}
    name: "Relay 1"
    id: relay_1
    restore_mode: ALWAYS_OFF
    icon: "mdi:electric-switch"
    on_turn_on:
      - logger.log: "Relay 1 activated"
    on_turn_off:
      - logger.log: "Relay 1 deactivated"

  # Test switch for manual target triggering (momentary)
  - platform: template
    name: "‚ö° Test Target Hit"
    id: test_button
    icon: "mdi:target"
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - logger.log: "Test button pressed!"
      - script.execute: run_hit_script
      - logger.log: "Test complete!"
      - delay: 100ms
      - switch.turn_off: test_button

# ==============================================================================
# LIGHTING - LED Strips
# ==============================================================================
light:
  # Main Target LED Strip (6 LEDs) - Full power available with 2A regulator
  - platform: esp32_rmt_led_strip
    chipset: WS2812
    rmt_symbols: 64
    rgb_order: GRB
    pin: 
      number: ${led_gpio}
      ignore_strapping_warning: true
    num_leds: 6
    name: "Target LEDs"
    id: led_strip
    default_transition_length: 500ms
    color_correct: [100%, 100%, 100%]  # Full brightness restored - 2A is plenty
    restore_mode: RESTORE_AND_OFF  # Allow proper restoration of saved state

    # Auto-save LED settings when they change
    on_state:
      - lambda: |-
          // Only auto-save after startup is complete and not during hit processing
          if (!id(startup_complete)) {
            ESP_LOGI("LED", "‚è≥ Skipping auto-save during startup initialization");
            return;
          }
          if (id(hit_processing)) {
            ESP_LOGI("LED", "üéØ Skipping auto-save during hit effect processing");
            return;
          }
          
          ESP_LOGI("LED", "üíæ Auto-saving LED settings...");
          
          // Save current brightness (direct assignment)
          id(saved_brightness) = id(led_strip).remote_values.get_brightness();
          
          // Save current RGB values
          id(saved_red) = id(led_strip).remote_values.get_red();
          id(saved_green) = id(led_strip).remote_values.get_green();
          id(saved_blue) = id(led_strip).remote_values.get_blue();
          
          // Save current effect (get current effect name and map to index)
          std::string current_effect = id(led_strip).get_effect_name();
          int effect_index = 0;  // Default to solid color
          if (current_effect == "Rainbow Effect") effect_index = 1;
          else if (current_effect == "Color Wipe Effect") effect_index = 2;
          else if (current_effect == "Scanner Effect") effect_index = 3;
          else if (current_effect == "Twinkle Effect") effect_index = 4;
          
          id(saved_effect_index) = effect_index;
          
          ESP_LOGI("LED", "üíæ Saved: B=%.2f, RGB=(%.2f,%.2f,%.2f), Effect='%s' (index=%d)", 
                   (float)id(saved_brightness), (float)id(saved_red), 
                   (float)id(saved_green), (float)id(saved_blue),
                   current_effect.c_str(), effect_index);
    
    effects:
      - addressable_rainbow:
          name: Rainbow Effect
          speed: 10
          width: 50
      - addressable_color_wipe:
          name: Color Wipe Effect
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 1
      - addressable_scan:
          name: Scanner Effect
      - addressable_twinkle:
          name: Twinkle Effect

  # Secondary LED Strip (Configurable count) - Full power available
  - platform: esp32_rmt_led_strip
    chipset: WS2812
    rmt_symbols: 128 
    rgb_order: RGB
    pin: ${led2_gpio}
    num_leds: ${strip_2_led_count}
    name: "LED Strip 2"
    id: led_strip2
    default_transition_length: 500ms
    color_correct: [100%, 100%, 100%]  # Full brightness restored
    restore_mode: RESTORE_DEFAULT_OFF  # Keep conservative startup
    internal: ${strip_2_internal}  # Hidden for Rev1, visible for Rev3
    effects:
      - addressable_rainbow:
          name: Rainbow Effect
          speed: 10
          width: 50
      - addressable_color_wipe:
          name: Color Wipe Effect
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 1
      - addressable_scan:
          name: Scanner Effect
      - addressable_twinkle:
          name: Twinkle Effect


# ==============================================================================
# USER CONTROLS - Numbers and Selects
# ==============================================================================
number:
  # Relay activation duration control
  - platform: template
    name: "Relay Timer"
    id: relay_timer_control
    min_value: 100
    max_value: 60000
    step: 100
    restore_value: true
    optimistic: true
    initial_value: ${default_relay_time}
    icon: "mdi:timer-outline"
    unit_of_measurement: "ms"
    set_action:
      - lambda: |-
          int value = static_cast<int>(x); 
          id(relay_timer) = value;
          ESP_LOGI("config", "Relay timer set to: %d ms", value);
          
  # Target cooldown period control
  - platform: template
    name: "Cooldown Timer"
    id: target_cooldown_control
    min_value: 0
    max_value: 60000
    step: 100
    restore_value: true
    optimistic: true
    initial_value: ${default_cooldown_time}
    icon: "mdi:timer-sand"
    unit_of_measurement: "ms"
    set_action:
      - lambda: |-
          int value = static_cast<int>(x); 
          id(cooldown_timer) = value;
          ESP_LOGI("config", "Cooldown timer set to: %d ms", value);

# ==============================================================================
# HIT EFFECT OPTIONS
# ==============================================================================
select:
  # Hit effect selection
  - platform: template
    name: "Target LEDs Hit Effect"
    id: hit_effect_select
    options:
      - "Rainbow Effect"
      - "Color Wipe Effect"
      - "Scanner Effect"
      - "Twinkle Effect"
      - "Solid Color"
    initial_option: "Color Wipe Effect"
    restore_value: true
    optimistic: true
    set_action:
      - lambda: |-
          // Save effect index when selection changes
          int effect_index = 2; // Default to Color Wipe
          if (x == "Rainbow Effect") effect_index = 1;
          else if (x == "Color Wipe Effect") effect_index = 2;
          else if (x == "Scanner Effect") effect_index = 3;
          else if (x == "Twinkle Effect") effect_index = 4;
          else if (x == "Solid Color") effect_index = 0;
          
          ESP_LOGI("LED", "üíæ Saved hit effect: %s (index=%d)", x.c_str(), effect_index);


# ==============================================================================
# GLOBAL VARIABLES - Common State Management
# ==============================================================================
globals:
  # IR receiver enable/disable state
  - id: ir_enabled
    type: bool
    restore_value: no
    initial_value: 'true'
    
  # Last received IR command
  - id: ir_command
    type: int
    restore_value: no
    initial_value: '0'

  # Saved LED effect as index (more reliable than string)
  - id: saved_effect_index
    type: int
    restore_value: yes
    initial_value: '3'  # Scanner Effect = 3
    
  # Relay activation duration (milliseconds)
  - id: relay_timer
    type: int
    restore_value: true
    initial_value: ${default_relay_time}
    
  # Target cooldown period (milliseconds)
  - id: cooldown_timer
    type: int
    restore_value: true
    initial_value: ${default_cooldown_time}

  # Prevent auto-save during hit effect processing
  - id: hit_processing
    type: bool
    restore_value: no
    initial_value: 'false'

# Saved LED brightness (0.0 to 1.0)
  - id: saved_brightness
    type: float
    restore_value: yes
    initial_value: '0.5'  # 50% default brightness
    
  # Saved LED colors (0.0 to 1.0)
  - id: saved_red
    type: float
    restore_value: yes
    initial_value: '1.0'  # Default white
  
  - id: saved_green  
    type: float
    restore_value: yes
    initial_value: '1.0'
    
  - id: saved_blue
    type: float
    restore_value: yes
    initial_value: '1.0'
    
  # Auto-save LED settings when they change (but not during startup)
  - id: startup_complete
    type: bool
    restore_value: no
    initial_value: 'false'
