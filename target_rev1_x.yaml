# ==============================================================================
# SUBSTITUTIONS - Configuration Variables
# ==============================================================================
substitutions:
  # Hardware Configuration
  hit_display_time: "3000"       # Time to display hit effect
  default_relay_time: "3000"     # Relay activation time after hit in milliseconds
  default_cooldown_time: "1000"  # Time target is inactive after hit in milliseconds
  default_points: "10"           # Points awarded for hitting this target

  # Target Internal GPIO Pins
  led_gpio: GPIO5        # Main target LED strip
  ir_gpio: GPIO19        # IR receiver
  relay_gpio: GPIO23     # Relay output

  # Right Side Connector Pins
  tx_gpio: GPIO01        # UART TX
  rx_gpio: GPIO03        # UART RX
  io22_gpio: GPIO22      # General I/O
  io21_gpio: GPIO21      # General I/O
  io25_gpio: GPIO25      # General I/O
  io32_gpio: GPIO32      # General I/O
  
  # Left Side Connector Pins
  io33_gpio: GPIO33      # General I/O
  io34_gpio: GPIO34      # ADC input (input only)
  io35_gpio: GPIO35      # ADC input (input only)
  io4_gpio: GPIO4        # PWM 2
  io0_gpio: GPIO0        # PWM 1
  io2_gpio: GPIO2        # PWM 0

  # Project Information
  project_name: "CodeMakesItGo.Target"
  project_version: "1.0.0"

# ==============================================================================
# EXTERNAL PACKAGES
# ==============================================================================
packages:
  color_controls: !include color_controls.yaml
    
  # Change this manually when changing target_type:
  # - For standalone: uncomment the next line
  config_file: !include target_standalone_config.yaml

  # - For networked: uncomment the next two lines
  #config_file: !include target_networked_config.yaml

# ==============================================================================
# CORE CONFIGURATION
# ==============================================================================
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.7.4  
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: ${project_name}
    version: ${project_version}
  on_boot:
    priority: 300
    then:
      # Initialize timer controls with saved values
      - number.set:
          id: relay_timer_control
          value: !lambda 'return id(relay_timer);'
      - number.set:
          id: target_cooldown_control
          value: !lambda 'return id(cooldown_timer);'
      # Wait for components to initialize
      - delay: 500ms
      # Log startup completion
      - logger.log: "Target system initialized successfully"

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino
    version: recommended
  flash_size: 4MB

# ==============================================================================
# NETWORK & DEBUGGING
# ==============================================================================
logger:
  level: DEBUG
  logs:
    adc: INFO  # Reduce ADC-related log spam
  
web_server: # Target web page
  port: 80
  include_internal: true
  css_include: "custom.css"
  js_include: "custom.js"
  version: 2

# Allow Over-The-Air updates
ota: 
  - platform: esphome
    password: ""
# ==============================================================================
# SENSORS
# ==============================================================================
sensor:
  # System uptime monitoring
  - platform: uptime
    name: "Uptime Sensor"
    update_interval: 60s  # Reduce frequency for less spam
    
  # Analog voltage measurement on GPIO34 
  - platform: adc
    pin: 
      number: ${io34_gpio}
    name: "GPIO34 Voltage"
    update_interval: 5s
    accuracy_decimals: 2
    unit_of_measurement: "V"
    attenuation: 12db  # Explicit attenuation for 0-3.3V range
    raw: false
    filters:
      - multiply: 3.3
      - offset: -0.25
      - lambda: 'return std::max(0.0f, x);'
    on_value_range:
      - below: 0.5
        then:
          - logger.log: "WARNING: Low voltage detected on GPIO34"
          
  # Analog voltage measurement on GPIO35 
  - platform: adc
    pin: 
      number: ${io35_gpio}
    name: "GPIO35 Voltage"
    update_interval: 5s
    accuracy_decimals: 2
    unit_of_measurement: "V"
    attenuation: 12db  # Explicit attenuation for 0-3.3V range
    raw: false
    filters:
      - multiply: 3.3
      - offset: -0.25
      - lambda: 'return std::max(0.0f, x);'
    on_value_range:
      - below: 0.5
        then:
          - logger.log: "WARNING: Low voltage detected on GPIO35"

# ==============================================================================
# BINARY SENSORS - Digital Inputs
# ==============================================================================
binary_sensor:
  
  # GPIO21 Digital Input
  - platform: gpio
    pin:
      number: ${io21_gpio}
      mode: INPUT_PULLUP
      inverted: true
    name: "GPIO21 Digital State"
    device_class: "motion"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - logger.log: "GPIO21 state is HIGH"
    on_release:
      - logger.log: "GPIO21 state is LOW"

  # GPIO25 Digital Input
  - platform: gpio
    pin:
      number: ${io25_gpio}
      mode: INPUT_PULLUP
      inverted: true
    name: "GPIO25 Digital State"
    device_class: "motion"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - logger.log: "GPIO25 state is HIGH"
    on_release:
      - logger.log: "GPIO25 state is LOW"

  # GPIO32 Digital Input
  - platform: gpio
    pin:
      number: ${io32_gpio}
      mode: INPUT_PULLUP
      inverted: true
    name: "GPIO32 Digital State"
    device_class: "motion"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - logger.log: "GPIO32 state is HIGH"
    on_release:
      - logger.log: "GPIO32 state is LOW"

  # GPIO33 Digital Input
  - platform: gpio
    pin:
      number: ${io33_gpio}
      mode: INPUT_PULLUP
      inverted: true
    name: "GPIO33 Digital State"
    device_class: "motion"
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - logger.log: "GPIO33 state is HIGH"
    on_release:
      - logger.log: "GPIO33 state is LOW"
# ==============================================================================
# INFRARED RECEIVER
# ==============================================================================
remote_receiver:
  pin:
    number: ${ir_gpio}
    inverted: true      # Keep this for most IR receiver modules (TSOP, etc.)
    mode:
      input: true
      pullup: true
  tolerance: 25%
  filter: 100us
  idle: 40ms
 
  # NEC protocol (most common)
  on_nec:
    then:
      - if:
          condition:
            - lambda: 'return id(ir_enabled);'
          then:
            # Process IR command - keep debug logging if needed for troubleshooting
            - lambda: |-
                ESP_LOGI("ir_debug", "NEC - Address: 0x%04X, Command: 0x%02X", x.address, x.command & 0xFF);
                id(ir_command) = x.command & 0xFF;  // Store full 16-bit command
            - script.execute: target_hit_script
            - logger.log: "IR Command Completed"    
          else:
            - logger.log: "IR Command Ignored (disabled)"

  # Pronto protocol - for your specific remote
  on_pronto:
    then:
      - if:
          condition:
            - lambda: 'return id(ir_enabled);'
          then:
            - lambda: |-
                ESP_LOGI("ir_pronto", "Pronto signal received - Data length: %zu", x.data.size());
                if (x.data.size() >= 4) {
                  ESP_LOGI("ir_pronto", "First 4 values: 0x%04X 0x%04X 0x%04X 0x%04X", 
                    x.data[0], x.data[1], x.data[2], x.data[3]);
                }
                // Use a simple hash of the data as the command
                id(ir_command) = x.data.size() > 0 ? x.data[0] & 0xFF : 0;
            - script.execute: target_hit_script
            - logger.log: "Pronto IR Command Completed"
          else:
            - logger.log: "Pronto IR Command Ignored (disabled)"

# ==============================================================================
# SCRIPTS - Target Logic (moved to separate files)
# ==============================================================================
# Scripts are now included from target_standalone_scripts.yaml or target_networked_scripts.yaml

# ==============================================================================
# LIGHTING - LED Strips
# ==============================================================================
light:
  # Main Target LED Strip (6 LEDs) - Use SPI method to free up RMT channels
  - platform: esp32_rmt_led_strip
    chipset: WS2812  # Changed back to WS2812 for main strip
    rmt_symbols: 64
    rgb_order: GRB
    pin: 
      number: ${led_gpio}
      ignore_strapping_warning: true
    num_leds: 6
    name: "Target LEDs"
    id: led_strip
    default_transition_length: 500ms
    color_correct: [100%, 100%, 100%]
    restore_mode: RESTORE_AND_ON
    effects:
      - addressable_rainbow:
          name: Rainbow Effect
          speed: 10
          width: 50
      - addressable_color_wipe:
          name: Color Wipe Effect
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 1
      - addressable_scan:
          name: Scanner Effect
      - addressable_twinkle:
          name: Twinkle Effect

  # Placeholder LED Strip 2 (not connected in rev1 hardware)
  - platform: esp32_rmt_led_strip
    chipset: WS2812
    rmt_symbols: 64
    rgb_order: RGB
    pin: ${io22_gpio}  # Using available GPIO22
    num_leds: 1
    name: "LED Strip 2"
    id: led_strip2
    internal: true  # Hide from UI since it's not used
    restore_mode: RESTORE_DEFAULT_OFF

# ==============================================================================
# SWITCHES - Digital Outputs
# ==============================================================================
switch:
  # Main relay output
  - platform: gpio
    pin:
      number: ${relay_gpio}
    name: "Relay"
    id: relay_1

  # Test button for manual hit simulation
  - platform: template
    name: "Test Button"
    id: test_button
    turn_on_action:
      - logger.log: "Test button pressed!"
      - script.execute: target_hit_script
      - logger.log: "Test complete!"
      - switch.turn_off:
          id: test_button


# ==============================================================================
# USER CONTROLS - Numbers and Selects
# ==============================================================================
number:
  # Relay activation duration control
  - platform: template
    name: "Relay Timer"
    id: relay_timer_control
    min_value: 100
    max_value: 60000
    step: 100
    restore_value: true  # Should restore
    optimistic: true
    initial_value: ${default_relay_time}
    icon: "mdi:timer-outline"
    unit_of_measurement: "ms"
    set_action:
      - lambda: |-
          int value = static_cast<int>(x); 
          id(relay_timer) = value;
          ESP_LOGI("config", "Relay timer set to: %d ms", value);
          
  # Target cooldown period control
  - platform: template
    name: "Cooldown Timer"
    id: target_cooldown_control
    min_value: 0
    max_value: 60000
    step: 100
    restore_value: true  # Should restore
    optimistic: true
    initial_value: ${default_cooldown_time}  # Use new default
    icon: "mdi:timer-sand"
    unit_of_measurement: "ms"
    set_action:
      - lambda: |-
          int value = static_cast<int>(x); 
          id(cooldown_timer) = value;
          ESP_LOGI("config", "Cooldown timer set to: %d ms", value);

select:
  # Hit effect selection
  - platform: template
    name: "Target LEDs Hit Effect"
    id: hit_effect_select
    options:
      - "Rainbow Effect"
      - "Color Wipe Effect"
      - "Scanner Effect"
      - "Twinkle Effect"
      - "Solid Color"
    initial_option: "Color Wipe Effect"
    restore_value: true
    optimistic: true

# ==============================================================================
# GLOBAL VARIABLES
# ==============================================================================
globals:
  # IR receiver enable/disable state
  - id: ir_enabled
    type: bool
    restore_value: no
    initial_value: 'true'
    
  # Last received IR command
  - id: ir_command
    type: int
    restore_value: no
    initial_value: '0'

  # Saved LED effect as index (more reliable than string)
  - id: saved_effect_index
    type: int
    restore_value: yes
    initial_value: '3'  # Scanner Effect = 3
    
  # Relay activation duration (milliseconds)
  - id: relay_timer
    type: int
    restore_value: true
    initial_value: ${default_relay_time}
    
  # Target cooldown period (milliseconds)
  - id: cooldown_timer
    type: int
    restore_value: true
    initial_value: ${default_cooldown_time}  # Use new default